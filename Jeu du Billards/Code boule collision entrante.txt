#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>
#include <vector>
#include <cmath>
#include <iostream>

//collission avec les bouttons
bool ButtonCollision(float curseur_x, float curseur_y, sf::RectangleShape box, float box_width, float box_height)
{
    if (curseur_x >= box.getPosition().x
        && curseur_x < box.getPosition().x + box_width
        && curseur_y >= box.getPosition().y
        && curseur_y < box.getPosition().y + box_height)
        return true;
    else
        return false;
}

static void WriteInWindow(sf::Font& font, sf::Text& text, sf::String str, float size) {
    text.setFont(font);
    text.setOrigin(size / 2, size / 2);
    //text.setPosition(width / 2.f, 40.f);
    /*concatener avec des int pour actualiser le score*/
    text.setString(str);

    text.setCharacterSize(size);
    text.setFillColor(sf::Color::Blue);
    text.setStyle(sf::Text::Bold);
}
static void WriteInWindow(sf::Font& font, sf::Text& text, sf::String str) {
    text.setFont(font);
    /*concatener avec des int pour actualiser le score*/
    text.setString(str);
    text.setCharacterSize(60);
    text.setFillColor(sf::Color::Green);
    text.setStyle(sf::Text::Bold);
}

// Fonction pour charger les textures 
static void LoadTexture(sf::Texture& texture, sf::String path) {
    if (!texture.loadFromFile(path)) {
        std::cout << "Erreur chargement de la texture." << std::endl;
    }
}

// Fonction pour charger les sources audio 
static void LoadSourceSound(sf::SoundBuffer& buffer, sf::String path) {
    if (!buffer.loadFromFile(path)) {
        std::cout << "Erreur chargement du son" << std::endl;
    }
}

// Fonction pour charger les polices d'écriture 
static void LoadFont(sf::Font& font, sf::String path) {
    if (!font.loadFromFile(path)) {
        std::cout << "Erreur chargement de la police d'écriture." << std::endl;
    }
}

// Fonction pour configurer les boules en forme de triangle 
static void setupBalls(std::vector<sf::CircleShape>& balls, const sf::Texture& texture) {
    const float radius = 15.0f;     // Rayon des boules
    const float offsetX = 550.0f;  // Position horizontale du premier rang
    const float offsetY = 300.0f;  // Position verticale du premier rang

    for (int row = 0; row < 5; ++row) {            //Disposition par ligne 
        for (int col = 0; col <= row; ++col) {     // Disposition des colonnes en fonction des lignes 
            sf::CircleShape ball(radius);          // Création d'une boule 
            ball.setTexture(&texture);             // On applique la texture 
            float x = offsetX + (row * radius * 1.8f);  // le coefficient de multiplication en X
            float y = offsetY + (col * radius * 2.1f) - (row * radius);     // le coefficient de multiplication en Y
            ball.setPosition(x, y);     // On positionne la boule 
            balls.push_back(ball);      // On ajoute la balle à notre vecteur de sf::CircleShape
        }
    }
}

// Fonction pour vérifier les collisions entre les boules et les bords de la table
static void checkCollisionsWithTable(std::vector<sf::CircleShape>& balls, std::vector<sf::Vector2f>& velocities, const sf::FloatRect& tableBounds, sf::Sound& ballCollisionSound) {
    const float radius = balls[0].getRadius();      // On récupère le rayon qui est le même pour toute les boules
    for (size_t i = 0; i < balls.size(); ++i) {     // Pour chaque boule dans notre vecteur 
        sf::Vector2f position = balls[i].getPosition();     // On récupère la position de la boule 
        sf::Vector2f& velocity = velocities[i];             // On récupère la vitesse de déplacement de la boule 
        float borderUp = 30.f;    // Valeur représentant l'écart entre le bord réel de l'image et ce de la table 
        float borderDown = 50.f;    // Valeur représentant l'écart entre le bord réel de l'image et ce de la table 

        // Vérifier collision avec le bord gauche
        if (position.x - radius < tableBounds.left + borderUp) {
            ballCollisionSound.play();      // On joue le son de collision avec la bordure 
            velocity.x = -velocity.x;       // On inverse la vitesse de la boule suivant l'axe X 
            balls[i].setPosition(tableBounds.left + borderUp + radius, position.y);
        }
        // Vérifier collision avec le bord droit
        if (position.x + radius > tableBounds.left + tableBounds.width - borderDown) {
            ballCollisionSound.play();      // On joue le son de collision avec la bordure 
            velocity.x = -velocity.x;       // On inverse la vitesse de la boule suivant l'axe X 
            balls[i].setPosition(tableBounds.left + tableBounds.width - borderDown - radius, position.y);
        }
        // Vérifier collision avec le bord supérieur
        if (position.y - radius < tableBounds.top + borderUp) {
            ballCollisionSound.play();      // On joue le son de collision avec la bordure 
            velocity.y = -velocity.y;       // On inverse la vitesse de la boule suivant l'axe Y
            balls[i].setPosition(position.x, tableBounds.top + borderUp + radius);
        }
        // Vérifier collision avec le bord inférieur
        if (position.y + radius > tableBounds.top + tableBounds.height - borderDown) {
            ballCollisionSound.play();      // On joue le son de collision avec la bordure 
            velocity.y = -velocity.y;       // On inverse la vitesse de la boule suivant l'axe Y
            balls[i].setPosition(position.x, tableBounds.top + tableBounds.height - borderDown - radius);
        }
    }
}

// Fonction pour vérifier les collisions entre les boules entre elles
static void checkCollisionsBetweenBalls(std::vector<sf::CircleShape>& balls, std::vector<sf::Vector2f>& velocities, sf::Sound& ballCollisionSound) {
    const float radius = balls[0].getRadius();
    const float radiusSquared = (radius * 2) * (radius * 2);
    const float mass = 18.4f;       // On définit la masse des boules 

    for (size_t i = 0; i < balls.size(); ++i) {
        for (size_t j = i + 1; j < balls.size(); ++j) {
            // Début du calcul de la distance entre deux boules 
            sf::Vector2f pos1 = balls[i].getPosition();
            sf::Vector2f pos2 = balls[j].getPosition();

            sf::Vector2f diff = pos1 - pos2;
            float distSquared = diff.x * diff.x + diff.y * diff.y;
            // Fin du calcul de la distance entre les boules  

            if (distSquared < radiusSquared) {
                // On joue le son de collision 
                ballCollisionSound.play();

                // Calcul de la distance entre les centres des boules
                float dist = std::sqrt(distSquared);

                // Calcul des vitesses après collision
                sf::Vector2f velocityDiff = velocities[i] - velocities[j];
                sf::Vector2f positionDiff = pos1 - pos2;
                float dotProduct = velocityDiff.x * positionDiff.x + velocityDiff.y * positionDiff.y;

                if (dotProduct > 0) {
                    float collisionScale = dotProduct / distSquared;
                    sf::Vector2f collisionVector = positionDiff * collisionScale;

                    sf::Vector2f v1 = velocities[i] - (2 * mass / (mass + mass)) * collisionVector;
                    sf::Vector2f v2 = velocities[j] + (2 * mass / (mass + mass)) * collisionVector;

                    velocities[i] = v1;
                    velocities[j] = v2;

                    // Déplacement des boules pour éviter qu'elles restent collées
                    float overlap = 0.5f * (dist - radius * 2);
                    balls[i].move(-diff / dist * overlap);
                    balls[j].move(diff / dist * overlap);
                }
            }
        }
    }
}

// Fonction pour le système de friction qui vas permettre aux boules de s'arrêter au bout d'un moment 
static void applyFriction(std::vector<sf::Vector2f>& velocities, float friction) {
    for (auto& velocity : velocities) {
        velocity.x *= friction;
        velocity.y *= friction;

        // Si la vitesse est très petite, on l'arrête
        if (std::abs(velocity.x) < 0.01f) velocity.x = 0;
        if (std::abs(velocity.y) < 0.01f) velocity.y = 0;
    }
}

// Fonction pour vérifier si une boule est tombée dans un trou
static void checkPockets(std::vector<sf::CircleShape>& balls, std::vector<sf::Vector2f>& velocities, const std::vector<sf::Vector2f>& pockets, sf::Sound& inPocket) {
    const float radius = balls[0].getRadius();      // On récupère le rayon des boules
    for (size_t i = 0; i < balls.size(); ++i) {
        sf::Vector2f position = balls[i].getPosition();     // On récupère la position de la boule i 
        for (const auto& pocket : pockets) {
            if (std::hypot(position.x - pocket.x, position.y - pocket.y) < radius) {        // On vérifie si le rayon de la boule est plus petit que la distance qui le sépare d'un des trous
                inPocket.play();
                balls.erase(balls.begin() + i);     // On supprime la boule i du notre vecteur de CircleShape 
                velocities.erase(velocities.begin() + i);       // On supprime le vitesse de déplacelent du la boule i
                --i;
                break;
            }
        }
    }
}

// Fonction pour vérifier si une bille est arrêtée
static bool isCueBallStopped(const sf::Vector2f& velocity) {
    return std::abs(velocity.x) < 0.01f && std::abs(velocity.y) < 0.01f;
}

unsigned int width = 1000;  // Largeur de la fenêtre 
unsigned int height = 800;  // Hauteur de la fenêtre 

// Fonction du lancement du Jeu
void GameStart() {
    sf::RenderWindow window(sf::VideoMode(width, height), "Jeu de Billard");

    // Chargement de l'audio de fond
    sf::SoundBuffer main_music;
    LoadSourceSound(main_music, "res/Sounds/fone.ogg");
    sf::Sound mainMusic(main_music);
    mainMusic.setVolume(20.f);
    mainMusic.play();
    mainMusic.setLoop(true);     //On boucle la musique

    //chargement de l'audio de collision de boule 
    sf::SoundBuffer ball_collision;
    LoadSourceSound(ball_collision, "res/Sounds/ball.ogg");
    sf::Sound ballCollisionSound(ball_collision);

    //chargement de l'audio de collision avec la table 
    sf::SoundBuffer table_collision;
    LoadSourceSound(table_collision, "res/Sounds/border.ogg");
    sf::Sound tableCollisionSound(table_collision);
    
    //chargement de l'audio de collision avec les trous 
    sf::SoundBuffer pocket_collision;
    LoadSourceSound(pocket_collision, "res/Sounds/hole.ogg");
    sf::Sound inPocket(table_collision);

    // Chargement de la texture du background
    sf::Texture backgroundTexture;
    LoadTexture(backgroundTexture, "res/Textures/simple.jpg");
    sf::Sprite background;
    background.setTexture(backgroundTexture);
    background.setScale(width / 234.f, height / 234.f);

    // Chargement de la texture de la table
    sf::Texture tableTexture;
    LoadTexture(tableTexture, "res/Textures/board.png");

    // Chargement de la texture des boules
    sf::Texture ballTexture;
    LoadTexture(ballTexture, "res/Textures/ball.png");

    // Création de la table
    sf::RectangleShape table(sf::Vector2f(800, 400));
    table.setTexture(&tableTexture);
    table.setPosition(30, 140);
    sf::FloatRect tableBounds = table.getGlobalBounds();

    // Création des boules
    std::vector<sf::CircleShape> balls;
    setupBalls(balls, ballTexture);

    // Création des vecteurs de vitesse pour les boules
    std::vector<sf::Vector2f> velocities(balls.size(), sf::Vector2f(0.0f, 0.0f));  // Initialiser avec une vitesse nulle

    // Création de la bille blanche
    sf::CircleShape cueBall(15.0f);
    cueBall.setTexture(&ballTexture);
    cueBall.setPosition(width / 2.f - 350.f, height / 2.f - 100.f);  // Positionner la bille blanche au centre de la table avec un décalage
    balls.push_back(cueBall);   // Ajout dans le vecteur de sf::CircleShape 
    velocities.push_back(sf::Vector2f(0.0f, 0.0f));  // Initialiser la vitesse à zéro pour la bille blanche

    // Positions des poches (trous) sur la table
    float pocketWidthMin = 67.5f;
    float pocketWidthMax = 787.5f;
    float pocketHeihtMin = 175.f;
    float pocketWidthMiddle = 427.5f;
    float pocketHeihtMax = 505.f;
    std::vector<sf::Vector2f> pockets = {
        {pocketWidthMin, pocketHeihtMin}, {pocketWidthMax, pocketHeihtMin}, {pocketWidthMax, pocketHeihtMax}, {pocketWidthMin, pocketHeihtMax}, {pocketWidthMiddle, pocketHeihtMin}, {pocketWidthMiddle, pocketHeihtMax}
    };

    float rayon = 13.f;
    //Test des trous
    sf::CircleShape ball(rayon);
    ball.setOrigin(rayon, rayon);
    ball.setFillColor(sf::Color::Red);
    ball.setPosition(pocketWidthMin, pocketHeihtMin);
    sf::CircleShape ball2(rayon);
    ball2.setOrigin(rayon, rayon);
    ball2.setFillColor(sf::Color::Red);
    ball2.setPosition(pocketWidthMax, pocketHeihtMin);
    sf::CircleShape ball3(rayon);
    ball3.setOrigin(rayon, rayon);
    ball3.setFillColor(sf::Color::Red);
    ball3.setPosition(pocketWidthMax, pocketHeihtMax);
    sf::CircleShape ball4(rayon);
    ball4.setOrigin(rayon, rayon);
    ball4.setFillColor(sf::Color::Red);
    ball4.setPosition(pocketWidthMin, pocketHeihtMax);
    sf::CircleShape ball5(rayon);
    ball5.setOrigin(rayon, rayon);
    ball5.setFillColor(sf::Color::Red);
    ball5.setPosition(pocketWidthMiddle, pocketHeihtMin);
    sf::CircleShape ball6(rayon);
    ball6.setOrigin(rayon, rayon);
    ball6.setFillColor(sf::Color::Red);
    ball6.setPosition(pocketWidthMiddle, pocketHeihtMax);

    const float friction = 0.99f;  // Coefficient de friction

    bool pause = false;  // Variable pour mettre le jeu en Pause
    bool readyToShoot = true;  // Variable pour indiquer si le joueur peut frapper
    float powerLevel = 0.0f;   // Niveau de puissance du coup
    float maxPowerLevel = 16.0f;   // Puissance maximale du coup
    bool increasingPower = true;  // Variable pour augmenter la puissance

    sf::Clock clock;    // Création d'une horloge 

    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();

            // Pour mettre sur pause on appui sur la barre Espace 
            if (event.type == sf::Event::KeyPressed) {
                if (event.key.code == sf::Keyboard::P)
                    pause = !pause;
            }
        }

        // Si on est n'est pas en pause
        if (!pause) {
            if (clock.getElapsedTime().asMilliseconds() > 1000.f / 60.f) {    // On bloque la vitesse du jeu à 60 fps
                // Mettre à jour la position des boules
                for (size_t i = 0; i < balls.size(); ++i) {
                    balls[i].move(velocities[i]);
                }

                // Vérification les collisions avec les bords
                checkCollisionsWithTable(balls, velocities, tableBounds, tableCollisionSound);

                // Vérification les collisions entre les boules
                checkCollisionsBetweenBalls(balls, velocities, ballCollisionSound);

                // Vérification si les boules sont tombées dans les poches
                checkPockets(balls, velocities, pockets, inPocket);

                // On applique la friction
                applyFriction(velocities, friction);

                // Gestion du tir du joueur
                if (isCueBallStopped(velocities.back())) {
                    if (sf::Keyboard::isKeyPressed(sf::Keyboard::Space) && readyToShoot) {
                        // Lancer la bille blanche avec la puissance déterminée
                        velocities.back() = sf::Vector2f(powerLevel, -powerLevel);  // Direction du vecteur vitesse (à ajuster)
                        readyToShoot = false;
                    }

                    // Ajuster la puissance du tir
                    if (increasingPower) {
                        powerLevel += 0.1f;
                        if (powerLevel >= maxPowerLevel) {
                            increasingPower = false;
                        }
                    }
                    else {
                        powerLevel -= 0.1f;
                        if (powerLevel <= 0.0f) {
                            increasingPower = true;
                        }
                    }
                }
                else {
                    readyToShoot = true;
                }

                clock.restart();  // Redémarrer l'horloge pour la prochaine itération
            }
        }

        window.clear();
        window.draw(background);
        window.draw(table);

        for (const auto& ball : balls) {
            window.draw(ball);
        }
        //ajout des tests des trous 
        window.draw(ball);
        window.draw(ball2);
        window.draw(ball3);
        window.draw(ball4);
        window.draw(ball5);
        window.draw(ball6);

        // Dessiner la jauge de puissance
        sf::RectangleShape powerBar(sf::Vector2f(60, powerLevel * 40));  // Taille de la jauge
        powerBar.setFillColor(sf::Color::Red);
        powerBar.setOutlineThickness(2.f);
        powerBar.setOutlineColor(sf::Color::Black);
        powerBar.setPosition(width - 100, height - 60 - powerLevel * 40);  // 
        window.draw(powerBar);

        window.display();
    }

}

// Menu des options 
void Option() {

}


// Menu principal 
void Menu() {

    //Définition de la fenêtre du menu principale 
    sf::RenderWindow mainMenu(sf::VideoMode(width, height), "Jeu de Billard");

    //chargement de la texture de l'arrière plan 
    sf::Texture backgroundTexture;
    LoadTexture(backgroundTexture, "res/Textures/intro.jpg");
    sf::Sprite background;
    background.setTexture(backgroundTexture);

    //Boutton 
    sf::RectangleShape play, option, quit;
    float button_width = 450.f;
    float button_height = 90.f;
    float offsetHeight = 30.f;
    float offsetWidth = 130.f;
    sf::Texture buttonTexture;
    LoadTexture(buttonTexture, "res/Textures/button.png");

    //police d'écriture 
    sf::Font font;
    //chargement police
    LoadFont(font, "res/Fonts/times-new-roman.ttf");

    //Pour le son
    sf::SoundBuffer mainMenuSoundbuffer;
    //chargement du song 
    LoadSourceSound(mainMenuSoundbuffer, "res/Sounds/intro.ogg");
    sf::Sound music;
    music.setBuffer(mainMenuSoundbuffer);
    music.setLoop(true);
    music.setVolume(40.f);
    music.play();

    //pour le boutton play 
    play.setOrigin(button_width / 2.f, button_height / 2.f);
    play.setSize(sf::Vector2f(button_width, button_height));
    play.setPosition(sf::Vector2f(width / 2.f, height / 2.f));
    play.setTexture(&buttonTexture);
    sf::Text playText;
    playText.setPosition(width / 2.f - button_width / 2.f + offsetWidth, height / 2.f - button_height / 2.f);
    WriteInWindow(font, playText, "PLAY");

    //pour le boutton option 
    option.setOrigin(button_width / 2.f, button_height / 2.f);
    option.setSize(sf::Vector2f(button_width, button_height));
    option.setPosition(sf::Vector2f(width / 2.f, height / 2.f + offsetHeight + button_height));
    option.setTexture(&buttonTexture);
    sf::Text optionText;
    optionText.setPosition(width / 2.f - button_width / 2.f + offsetWidth / 2.f, height / 2.f - button_height / 2.f + offsetHeight + button_height);
    WriteInWindow(font, optionText, "How to play");

    //pour le boutton quitter 
    quit.setOrigin(button_width / 2.f, button_height / 2.f);
    quit.setSize(sf::Vector2f(button_width, button_height));
    quit.setPosition(sf::Vector2f(width / 2.f, height / 2.f + button_height * 2.f + offsetHeight * 2.f));
    quit.setTexture(&buttonTexture);
    sf::Text quitText;
    quitText.setPosition(width / 2.f - button_width / 2.f + offsetWidth, height / 2.f - button_height / 2.f + button_height * 2.f + offsetHeight * 2.f);
    WriteInWindow(font, quitText, "QUIT");

    //gestion du menu principal 
    while (mainMenu.isOpen()) {
        sf::Event events;
        while (mainMenu.pollEvent(events)) {
            if (events.type == sf::Event::Closed)
                mainMenu.close();

            //Touche souris PLAY
            if (events.type == sf::Event::MouseButtonPressed) {
                if (events.mouseButton.button == sf::Mouse::Left) {
                    if (ButtonCollision(events.mouseButton.x + button_width / 2, events.mouseButton.y + button_height / 2, play, button_width, button_height)) {
                        /*astuce debug std::cout << "ok" << std::endl;*/
                        music.stop();
                        mainMenu.close();
                        //lacer le jeu principal
                        GameStart();
                    }
                }
            }
            //Touche souris OPTION
            if (events.type == sf::Event::MouseButtonPressed) {
                if (events.mouseButton.button == sf::Mouse::Left) {
                    if (ButtonCollision(events.mouseButton.x + button_width / 2, events.mouseButton.y + button_height / 2, option, button_width, button_height)) {
                        /*astuce debug std::cout << "ok" << std::endl;*/
                        mainMenu.close();
                        //lacer le menu des options
                        Option();
                    }
                }
            }
            //Touche souris QUIT
            if (events.type == sf::Event::MouseButtonPressed) {
                if (events.mouseButton.button == sf::Mouse::Left) {
                    if (ButtonCollision(events.mouseButton.x + button_width / 2, events.mouseButton.y + button_height / 2, quit, button_width, button_height)) {
                        /*astuce debug std::cout << "ok" << std::endl;*/
                        //quitter le jeu 
                        mainMenu.close();
                    }
                }
            }
            //Touche clavier  
            if (events.type == sf::Event::KeyPressed) {
                if (events.key.code == sf::Keyboard::Enter) {
                    mainMenu.close();
                    //lacer le jeu principal 
                    GameStart();
                }
            }
        }

        mainMenu.clear();
        mainMenu.draw(background);
        mainMenu.draw(play);
        mainMenu.draw(playText);
        mainMenu.draw(option);
        mainMenu.draw(optionText);
        mainMenu.draw(quit);
        mainMenu.draw(quitText);
        mainMenu.display();
    }
}

int main() {
    // Lancement du menu principal
    Menu();
    return 0;
}
